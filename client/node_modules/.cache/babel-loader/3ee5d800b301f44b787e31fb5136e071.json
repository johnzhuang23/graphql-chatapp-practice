{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { SubscriptionClient } from 'subscriptions-transport-ws';\nimport { ApolloLink } from \"../core/index.js\";\n\nvar WebSocketLink = function (_super) {\n  __extends(WebSocketLink, _super);\n\n  function WebSocketLink(paramsOrClient) {\n    var _this = _super.call(this) || this;\n\n    if (paramsOrClient instanceof SubscriptionClient) {\n      _this.subscriptionClient = paramsOrClient;\n    } else {\n      _this.subscriptionClient = new SubscriptionClient(paramsOrClient.uri, paramsOrClient.options, paramsOrClient.webSocketImpl);\n    }\n\n    return _this;\n  }\n\n  WebSocketLink.prototype.request = function (operation) {\n    return this.subscriptionClient.request(operation);\n  };\n\n  return WebSocketLink;\n}(ApolloLink);\n\nexport { WebSocketLink };","map":{"version":3,"mappings":";AAAA,SAASA,kBAAT,QAAkD,4BAAlD;AAEA,SAASC,UAAT,QAAmD,kBAAnD;;AA4BA;AAAmCC;;AAGjC,yBACEC,cADF,EACkE;AADlE,gBAGEC,qBAAO,IAHT;;AAKE,QAAID,cAAc,YAAYH,kBAA9B,EAAkD;AAChDK,WAAI,CAACC,kBAAL,GAA0BH,cAA1B;AACD,KAFD,MAEO;AACLE,WAAI,CAACC,kBAAL,GAA0B,IAAIN,kBAAJ,CACxBG,cAAc,CAACI,GADS,EAExBJ,cAAc,CAACK,OAFS,EAGxBL,cAAc,CAACM,aAHS,CAA1B;AAKD;;;AACF;;AAEMC,oCAAP,UAAeC,SAAf,EAAmC;AACjC,WAAO,KAAKL,kBAAL,CAAwBM,OAAxB,CAAgCD,SAAhC,CAAP;AAGD,GAJM;;AAKT;AAxBA,EAAmCV,UAAnC","names":["SubscriptionClient","ApolloLink","__extends","paramsOrClient","_super","_this","subscriptionClient","uri","options","webSocketImpl","WebSocketLink","operation","request"],"sources":["/Users/zz/sei/pratice/chatapp/client/node_modules/@apollo/src/link/ws/index.ts"],"sourcesContent":["import { SubscriptionClient, ClientOptions } from 'subscriptions-transport-ws';\n\nimport { ApolloLink, Operation, FetchResult } from '../core';\nimport { Observable } from '../../utilities';\n\nexport namespace WebSocketLink {\n  /**\n   * Configuration to use when constructing the subscription client (subscriptions-transport-ws).\n   */\n  export interface Configuration {\n    /**\n     * The endpoint to connect to.\n     */\n    uri: string;\n\n    /**\n     * Options to pass when constructing the subscription client.\n     */\n    options?: ClientOptions;\n\n    /**\n     * A custom WebSocket implementation to use.\n     */\n    webSocketImpl?: any;\n  }\n}\n\n// For backwards compatibility.\nexport import WebSocketParams = WebSocketLink.Configuration;\n\nexport class WebSocketLink extends ApolloLink {\n  private subscriptionClient: SubscriptionClient;\n\n  constructor(\n    paramsOrClient: WebSocketLink.Configuration | SubscriptionClient,\n  ) {\n    super();\n\n    if (paramsOrClient instanceof SubscriptionClient) {\n      this.subscriptionClient = paramsOrClient;\n    } else {\n      this.subscriptionClient = new SubscriptionClient(\n        paramsOrClient.uri,\n        paramsOrClient.options,\n        paramsOrClient.webSocketImpl,\n      );\n    }\n  }\n\n  public request(operation: Operation): Observable<FetchResult> | null {\n    return this.subscriptionClient.request(operation) as Observable<\n      FetchResult\n    >;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}