{"ast":null,"code":"var _jsxFileName = \"/Users/zz/sei/pratice/chatapp/client/src/Chat.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { ApolloClient, InMemoryCache, useMutation, useSubscription, gql } from '@apollo/client';\nimport { WebSocketLink } from \"@apollo/client/link/ws\";\nimport { Container, Chip, Grid, TextField, Button } from '@material-ui/core';\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst link = new WebSocketLink({\n  uri: `ws://localhost:4000/`,\n  options: {\n    reconnect: true\n  }\n});\nconst GET_MESSAGES = gql`\n  subscription {\n    messages {\n      id\n      user\n      text\n    }\n  }\n`;\nconst POST_MESSAGE = gql`\n  mutation($user:String!, $text:String!){\n    postMessage(user:$user, text:$text)\n  }\n`;\n\nconst Messages = _ref => {\n  _s();\n\n  let {\n    user\n  } = _ref;\n  const {\n    data\n  } = useSubscription(GET_MESSAGES);\n\n  if (!data) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginBottom: \"5rem\"\n    },\n    children: data.messages.map(_ref2 => {\n      let {\n        id,\n        user: messageUser,\n        text\n      } = _ref2;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: user === messageUser ? \"right\" : \"left\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            marginBottom: \"0.3rem\"\n          },\n          children: messageUser\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Chip, {\n          style: {\n            fontSize: \"0.9rem\"\n          },\n          color: user === messageUser ? \"primary\" : \"secondary\",\n          label: text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 25\n        }, this)]\n      }, id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 21\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Messages, \"5LK+53Oia6K8c0VFEgmT72QLLdU=\", false, function () {\n  return [useSubscription];\n});\n\n_c = Messages;\nexport const client = new ApolloClient({\n  link,\n  //websocket link\n  uri: 'http://localhost:4000/',\n  //connect to server\n  cache: new InMemoryCache()\n});\nexport const Chat = () => {\n  _s2();\n\n  const [user, setUser] = useState(\"\");\n  const [text, setText] = useState(\"\");\n  const [postMessage] = useMutation(POST_MESSAGE);\n\n  const sendMessage = () => {\n    if (text.length > 0 && user.length > 0) {\n      postMessage({\n        variables: {\n          user: user,\n          text: text\n        }\n      });\n      setText(\"\");\n    } else {\n      alert(\"Missing fields!\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Let's talk!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Messages, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 3,\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          onChange: e => {\n            setUser(e.target.value);\n          },\n          value: user,\n          size: \"small\",\n          fullWidth: true,\n          variant: \"outlined\",\n          required: true,\n          label: \"Required\",\n          placeholder: \"Enter name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 8,\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          onChange: e => {\n            setText(e.target.value);\n          },\n          value: text,\n          size: \"small\",\n          fullWidth: true,\n          variant: \"outlined\",\n          required: true,\n          label: \"Required\",\n          placeholder: \"Enter message here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 1,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: sendMessage,\n          fullWidth: true,\n          variant: \"contained\",\n          style: {\n            backgroundColor: \"green\",\n            color: \"white\"\n          },\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(Chat, \"k3avWxgVAu7tCIOTXeX9wxjEfIU=\", false, function () {\n  return [useMutation];\n});\n\n_c2 = Chat;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Messages\");\n$RefreshReg$(_c2, \"Chat\");","map":{"version":3,"sources":["/Users/zz/sei/pratice/chatapp/client/src/Chat.js"],"names":["ApolloClient","InMemoryCache","useMutation","useSubscription","gql","WebSocketLink","Container","Chip","Grid","TextField","Button","React","useState","link","uri","options","reconnect","GET_MESSAGES","POST_MESSAGE","Messages","user","data","marginBottom","messages","map","id","messageUser","text","textAlign","fontSize","client","cache","Chat","setUser","setText","postMessage","sendMessage","length","variables","alert","e","target","value","backgroundColor","color"],"mappings":"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","sourcesContent":["import { ApolloClient, InMemoryCache, useMutation, useSubscription, gql } from '@apollo/client';\nimport { WebSocketLink } from \"@apollo/client/link/ws\";\nimport { Container, Chip, Grid, TextField, Button } from '@material-ui/core';\nimport React, { useState } from 'react';\n\nconst link = new WebSocketLink({\n    uri: `ws://localhost:4000/`,\n    options: {\n        reconnect: true,\n    },\n});\n\n\nconst GET_MESSAGES = gql`\n  subscription {\n    messages {\n      id\n      user\n      text\n    }\n  }\n`;\n\nconst POST_MESSAGE = gql`\n  mutation($user:String!, $text:String!){\n    postMessage(user:$user, text:$text)\n  }\n`;\n\n\nconst Messages = ({ user }) => {\n    const { data } = useSubscription(GET_MESSAGES)\n    if (!data) {\n        return null;\n    }\n    return (\n        <div style={{ marginBottom: \"5rem\" }}>\n            {data.messages.map(({ id, user: messageUser, text }) => {\n                return (\n                    <div key={id} style={{ textAlign: user === messageUser ? \"right\" : \"left\" }}>\n                        <p style={{ marginBottom: \"0.3rem\" }}>{messageUser}</p>\n                        <Chip style={{ fontSize: \"0.9rem\" }} color={user === messageUser ? \"primary\" : \"secondary\"} label={text} />\n                    </div>\n                )\n            })}\n        </div>\n    )\n}\n\n\n\n\nexport const client = new ApolloClient({\n    link, //websocket link\n    uri: 'http://localhost:4000/', //connect to server\n    cache: new InMemoryCache(),\n});\n\n\nexport const Chat = () => {\n\n    const [user, setUser] = useState(\"\");\n    const [text, setText] = useState(\"\");\n    const [postMessage] = useMutation(POST_MESSAGE)\n\n    const sendMessage = () => {\n        if (text.length > 0 && user.length > 0) {\n            postMessage({\n                variables: { user: user, text: text }\n            })\n            setText(\"\");\n        } else {\n            alert(\"Missing fields!\")\n        }\n    }\n    return (\n        <Container>\n            <h3>Let's talk!</h3>\n            <Messages />\n            <Grid container spacing={2}>\n                <Grid item xs={3}>\n                    <TextField onChange={(e) => {\n                        setUser(e.target.value)\n                    }} value={user} size=\"small\" fullWidth variant=\"outlined\" required label=\"Required\" placeholder=\"Enter name\" />\n                </Grid>\n                <Grid item xs={8}>\n                    <TextField onChange={(e) => {\n                        setText(e.target.value)\n                    }} value={text} size=\"small\" fullWidth variant=\"outlined\" required label=\"Required\" placeholder=\"Enter message here\" />\n                </Grid>\n                <Grid item xs={1}>\n                    <Button onClick={sendMessage} fullWidth variant=\"contained\" style={{ backgroundColor: \"green\", color: \"white\" }}>Send</Button>\n                </Grid>\n            </Grid>\n        </Container>\n    )\n}\n\n"]},"metadata":{},"sourceType":"module"}